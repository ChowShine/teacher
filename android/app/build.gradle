def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

import groovy.json.JsonSlurper
apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))



android {
    compileSdkVersion 29

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.teacher.android"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.0.1"
        resConfigs "zh"
        multiDexEnabled true

        flavorDimensions "versionCode"
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

        manifestPlaceholders = [
                ALIPUSH_PKGNAME     : applicationId,
                ALIPUSH_APPKEY      : "0", //ALIPush上注册的包名对应的appkey.
                ALIPUSH_APPSECRET   : "0", //appsecret.
                HUAWEI_APPID        : "0",
                AMAP_KEY            : "205dd5f423ffe0ca6117a00401123ac0"
        ]
        ndk {
            abiFilters "armeabi", "armeabi-v7a"//, "x86"
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    productFlavors {

        def json = file("${rootProject.projectDir.path}/channel_config/group${GROUP}.json").getText("UTF-8")
        //读取app目录下的channel.json文件内容
        def flavors = new JsonSlurper().parseText(json) //转换成Jsons数组对象
        flavors.each { flavor ->

            def fileName = flavor.channel_name
            def channelJson = file("${rootProject.projectDir.path}/channel_config/channels/${fileName}.json").getText("UTF-8")
            def qudao = new JsonSlurper().parseText(channelJson) //转换成Jsons数组对象
            def INDEPENDENT_URL = flavor.INDEPENDENT_URL
            "${flavor.channel_name}" {//渠道名称，对应文件中的channel_name
                if ("Y".equals(INDEPENDENT_URL)) {
                    buildConfigField "String", "BASE_URL", "\"${qudao.BASE_URL}\"" //服务器地址
                }

                buildConfigField "String", "COLOR_STYLE", "\"${qudao.COLOR_STYLE}\"" //主题颜色
                applicationId qudao.applicationId
                buildConfigField "String", "APP_NAME", "\"${qudao.label}\"" //应用名称
                buildConfigField "String", "APP_ID", "\"${qudao.applicationId}\"" //应用ID
                buildConfigField "String", "xiao_id", "\"${qudao.xiao_id}\""
                buildConfigField "String", "xiao_key", "\"${qudao.xiao_key}\""
                buildConfigField "String", "oppo_appkey", "\"${qudao.oppo_appkey}\""
                buildConfigField "String", "oppo_appSecret", "\"${qudao.oppo_appSecret}\""
                buildConfigField "String", "meizu_appId", "\"${qudao.meizu_appId}\""
                buildConfigField "String", "meizu_appkey", "\"${qudao.meizu_appkey}\""

                manifestPlaceholders = [
                        ALIPUSH_PKGNAME     : applicationId,
                        ALIPUSH_APPKEY      : qudao.ALIPUSH_APPKEY, //ALIPush上注册的包名对应的appkey.
                        ALIPUSH_APPSECRET   : qudao.ALIPUSH_APPSECRET, //appsecret.
                        HUAWEI_APPID        : qudao.HUAWEI_APPID,
                        app_icon            : qudao.app_icon,//APP要显示的ICON图标，对应文件中的icon
                        label               : qudao.label,
                        channel_name        : flavor.channel_name
                ]
            }
        }
    }

    sourceSets {
        def json = file("${rootProject.projectDir.path}/channel_config/group${GROUP}.json").getText("UTF-8")
        //读取app目录下的channel.json文件内容
        def flavors = new JsonSlurper().parseText(json) //转换成Jsons数组对象
        flavors.each { flavor ->
            def colorstyle = flavor.COLOR_STYLE
            "${flavor.channel_name}" { //渠道资源配置
                if (colorstyle.equals("blue")) {
                    res.srcDirs = ["src/main/res", "${rootProject.projectDir.path}/channel_config/icons/${flavor.channel_name}"]
                    //指定资源目录
                }
                if (colorstyle.equals("yellow")) {
                    res.srcDirs = ["src/main/res", "${rootProject.projectDir.path}/channel_config/icons/${flavor.channel_name}"]
                    //指定资源目录
                }
            }
        }
    }

    //修改apk名
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('release.apk')) {
//                // 输出apk名称为xxx_v1.1.1_20171005-21:23:30.apk
//                def fileName = "${variant.flavorName}_v${variant.versionName}_${releaseTime()}_release.apk"
//                outputFileName = new File(fileName)
//            }
//            if (outputFile != null && outputFile.name.endsWith('debug.apk')) {
//                // 输出apk名称为xxx_v1.1.1_20171005-21:23:30.apk
//                def fileName = "${variant.flavorName}_v${variant.versionName}_${releaseTime()}_debug.apk"
//                outputFileName = new File(fileName)
//            }
//        }
//    }

    signingConfigs {
        teacher {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.teacher
            //混淆
            //minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable = true
            //混淆
            //minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://www.baidu.com\"" //服务器地址
        }
    }

    packagingOptions {//加上这写代码
        pickFirst 'lib/armeabi/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
}

def releaseTime() {
    return new Date().format("yyyyMMdd_HH_mm_ss", TimeZone.getTimeZone("GMT+8:00"))
}

flutter {
    source '../..'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.so'], dir: 'libs')
    implementation(name: 'liboboe-release', ext: 'aar')
    //implementation(name: 'videochat_aar-release', ext: 'aar')
    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
    implementation 'androidx.annotation:annotation:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.amap.api:location:latest.integration'//地图
    implementation 'androidx.appcompat:appcompat:1.0.0'//地图
}
